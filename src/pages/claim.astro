---
import { Image } from 'astro:assets';

import Layout from '../layouts/Layout.astro';
import MainSection from '../layouts/MainSection.astro';
import Modal from '../components/Modal.astro';

import Placeholder from '../assets/images/placeholder.png';
import Button from '../components/Button.astro';
---

<Layout title="Getting Credential...">
    <MainSection class="flex flex-col gap-10 xl:gap-20 p-5 xl:p-24" />
</Layout>

<script>
    import QRCode from 'qrcode';
    import { format } from 'date-fns';

    const urlSearchParams = new URLSearchParams(window.location.search);
    const params = Object.fromEntries(urlSearchParams.entries());
    const { token } = params;

    if (!token) window.location.href = `/error`;
   
    const title = document.getElementById('title') as HTMLHeadingElement;
    const info1 = document.getElementById('info-1') as HTMLParagraphElement;
    const info2 = document.getElementById('info-2') as HTMLParagraphElement;
    const qrcode = document.getElementById('qr-code') as HTMLImageElement;
    const directAnchorLink = document.getElementById('link-direct') as HTMLAnchorElement;
    
    title.innerText = 'Getting Credential...';

    try {
    
        const config = await (await fetch('/brand/config.json')).json();
        if (config.color) {
            document.body.style.backgroundColor = config.color;
        }
        const res = await fetch(`${config.api}/get-credential-links`, {
            headers: { Authorization: `Bearer ${token}` },
        });

        setTimeout(() => {
            // redirect nine minutes (540000 ms) after the page loads, 
            // since the exchange endpoint expires after ten minutes.
            window.location.replace(`/expired`);
        }, 540000);
        if (res.status !== 200) {
            window.location.href = `/error`;
        }
        else {
            const {
                links,
                metadata: {
                    credentialName,
                    earnerName,
                    awardedDate: _awardedDate,
                    issuedDate: _issuedDate,
                },
            } = (await res.json()) as {
                links: {
                    retrievalId: string;
                    directDeepLink: string;
                    vprDeepLink: string;
                    chapiVPR: {
                        challenge: string;
                        domain: string;
                        interact: {
                            service: [{ serviceEndpoint: string; type: string }, { type: string }];
                        };
                        query: { type: string };
                    };
                }[];
                metadata: {
                    credentialName: string;
                    earnerName: string;
                    awardedDate: string;
                    issuedDate: string;
                };
            };
            const awardedDate = format(new Date(_awardedDate), 'MMMM do, y');
            const issuedDate = format(new Date(_issuedDate), 'MMMM do, y');

            // Show display info
            document.title = credentialName;
            title.innerHTML = credentialName;
            info1.innerHTML = `Awarded to ${earnerName} on ${awardedDate}`;
            info2.innerHTML = `Issued on ${issuedDate}`;

            const url = links[0]?.directDeepLink;

            if (url) {
                const dataUrl = await QRCode.toDataURL(url);
                qrcode.src = dataUrl;
                directAnchorLink.href = url
            } else window.location.href = `/error`;
        }
    } catch (error) {
        console.error(error);
        window.location.href = `/error`;
    }
</script>
